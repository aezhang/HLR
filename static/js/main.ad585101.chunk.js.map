{"version":3,"sources":["Bar.js","BarElement.js","ConfidenceList.js","LeftCard.js","textFiles/about.js","App.js","textFiles/FAQ.js","textFiles/contact.js","reportWebVitals.js","index.js"],"names":["Bar","props","useState","animate","setAnimate","height","setHeight","useEffect","setTimeout","Math","round","val","className","style","BarElement","hovered","setHovered","onMouseEnter","onMouseDown","onMouseLeave","onMouseUp","toPrecision","label","ConfidenceList","revealed","setRevealed","isFirstLoad","useRef","current","prediction","Object","keys","confidences","map","key","LeftCard","tab","text","setText","pageLoad","dangerouslySetInnerHTML","__html","aboutText","App","mapping","initialState","i","length","canvasRef","contextRef","isDrawing","setIsDrawing","symbols","setSymbols","tfconfidences","setTFConfidences","tfprediction","setTFPrediction","isShowingBoxes","setIsShowingBoxes","strokes","setStrokes","numStrokes","setNumStrokes","scale","setScale","cardState","setCardState","tabState","setTabState","clearClicked","setClearClicked","showClicked","setShowClicked","canvas","size","min","window","innerHeight","innerWidth","csize","width","border","context","getContext","lineCap","lineJoin","strokeStyle","lineWidth","stopDrawing","closePath","dataURL","toDataURL","header","Headers","append","formdata","FormData","fetch","method","headers","body","redirect","then","response","json","tfresponse","catch","err","console","log","tabClicked","ref","nativeEvent","offsetX","offsetY","beginPath","moveTo","temp","push","onMouseMove","lineTo","stroke","onClick","clearRect","forEach","item","index","confidence","boundingBox","vertices","x","y","vertex","symbol","toFixed","toString","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAiBeA,MAff,SAAaC,GACT,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KAQA,OAPAC,qBAAU,WACNH,GAAW,GACXI,YAAW,WACPJ,GAAW,GACXE,EAAUG,KAAKC,MAAOT,EAAMU,IAAM,EAAM,OACzC,KACJ,CAACV,EAAMU,MAEN,qBAAKC,UAAS,cAAST,EAAU,UAAY,IAAMU,MAAO,CAAC,eAAe,GAAf,OAAmBR,EAAnB,UCkBpDS,MA5Bf,SAAoBb,GAClB,MAA8BC,oBAAS,GAAvC,mBAAOa,EAAP,KAAgBC,EAAhB,KAiBA,OACE,sBAAKJ,UAAS,qBAAgBG,EAAU,WAAa,IAAME,aAjBzC,WAClBD,GAAW,IAgB2EE,YAXrE,WACZH,GACDC,GAAW,IASgGG,aAd7F,WAClBH,GAAW,IAa+HI,UAN3H,WACVL,GACDC,GAAW,IAIf,UACI,sBAAMJ,UAAS,kBAAaG,EAAU,WAAa,IAAnD,SAA0Dd,EAAMU,IAAIU,YAAY,KAChF,cAAC,EAAD,CAAKV,IAAKV,EAAMU,MAChB,qBAAKC,UAAU,eACf,sBAAMA,UAAU,QAAhB,SAAyBX,EAAMqB,YCCxBC,MAxBf,SAAwBtB,GACtB,MAAgCC,oBAAS,GAAzC,mBAAOsB,EAAP,KAAiBC,EAAjB,KACMC,EAAcC,kBAAO,GAS3B,OARApB,qBAAU,WACHmB,EAAYE,SACfpB,YAAW,WACTiB,GAAY,KACX,GAELC,EAAYE,SAAU,IACrB,CAAC3B,EAAMuB,WAER,qCACE,qBAAKZ,UAAS,eAAUY,EAAU,QAAS,MAC3C,sBAAKZ,UAAU,gBAAf,UACE,0DAA6BX,EAAM4B,cAClCC,OAAOC,KAAK9B,EAAM+B,aAAaC,KAAI,SAACC,GAAD,OAChC,cAAC,EAAD,CAAsBZ,MAAOY,EAAKvB,IAAKV,EAAM+B,YAAYE,IAAxCA,aCEdC,MApBf,SAAkBlC,GACd,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAASD,EAAMmC,KAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAWZ,kBAAO,GAaxB,OAXApB,qBAAU,WACFgC,EAASX,UACTxB,GAAW,GACXI,YAAW,WACP8B,EAAQrC,EAAMmC,KACdhC,GAAW,KACZ,MAEPmC,EAASX,SAAU,IACpB,CAAC3B,EAAMmC,MAGN,qBAAKxB,UAAS,mBAAcT,EAAU,OAAS,IAAMqC,wBAAyB,CAACC,OAAQJ,MCjBhFK,EAFG,oYCuPHC,MA/Of,WAIE,IAHA,IAAMC,EAAU,kDACVC,EAAe,GAEZC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAClCD,EAAaD,EAAQE,IAAM,EAE7B,IAAME,EAAYrB,iBAAO,MACnBsB,EAAatB,iBAAO,MAC1B,EAAkCzB,oBAAS,GAA3C,mBAAOgD,EAAP,KAAkBC,EAAlB,KACA,EAA8BjD,mBAAS,IAAvC,mBAAOkD,EAAP,KAAgBC,EAAhB,KACA,EAA0CnD,mBAAS2C,GAAnD,mBAAOS,EAAP,KAAsBC,EAAtB,KACA,EAAwCrD,mBAAS,IAAjD,mBAAOsD,EAAP,KAAqBC,EAArB,KACA,EAA4CvD,oBAAS,GAArD,mBAAOwD,EAAP,KAAuBC,EAAvB,KACA,EAA8BzD,mBAAS,IAAvC,mBAAO0D,EAAP,KAAgBC,EAAhB,KACA,EAAoC3D,mBAAS,GAA7C,mBAAO4D,EAAP,KAAmBC,EAAnB,KACA,EAA0B7D,mBAAS,GAAnC,mBAAO8D,EAAP,KAAcC,EAAd,KACA,EAAkC/D,mBAASwC,GAA3C,mBAAOwB,EAAP,KAAkBC,EAAlB,KACA,EAAgCjE,mBAAS,SAAzC,mBAAOkE,EAAP,KAAiBC,EAAjB,KACA,EAAwCnE,oBAAS,GAAjD,oBAAOoE,GAAP,MAAqBC,GAArB,MACA,GAAsCrE,oBAAS,GAA/C,qBAAOsE,GAAP,MAAoBC,GAApB,MACA,GAAgCvE,oBAAS,GAAzC,qBAAOsB,GAAP,MAAiBC,GAAjB,MAEAlB,qBAAU,WACR,IAAMmE,EAAS1B,EAAUpB,QACnB+C,EAAOlE,KAAKmE,IAAIC,OAAOC,YAAaD,OAAOE,YAC3CC,EAAQ,IACdN,EAAOO,MAAQN,EACfD,EAAOrE,OAASsE,EAChBD,EAAO7D,MAAMoE,MAAb,UAAwBD,EAAxB,MACAN,EAAO7D,MAAMR,OAAb,UAAyB2E,EAAzB,MACAN,EAAO7D,MAAMqE,OAAb,kBAEA,IAAMC,EAAUT,EAAOU,WAAW,MAClCD,EAAQnB,MAAMW,EAAKK,EAAOL,EAAKK,GAC/Bf,EAASU,EAAKK,GACdG,EAAQE,QAAU,QAClBF,EAAQG,SAAW,QACnBH,EAAQI,YAAc,QACtBJ,EAAQK,UAAY,GACpBvC,EAAWrB,QAAUuD,IACpB,IAEH,IAeMM,GAAc,WAClB,GAAIvC,EAAW,CACbD,EAAWrB,QAAQ8D,YACnBvC,GAAa,GACb1B,IAAY,GACZ,IAAMkE,EAAU3C,EAAUpB,QAAQgE,YAE9BC,EAAS,IAAIC,QACjBD,EAAOE,OAAO,eAAgB,oBAE9B,IAAIC,EAAW,IAAIC,SACnBD,EAASD,OAAO,cAAeJ,GAO/BO,MAAM,yDANe,CACnBC,OAAQ,OACRC,QAASP,EACTQ,KAAML,EACNM,SAAU,WAGXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJnD,EAAWmD,EAASpD,SAAW,IAC/BG,EAAiBiD,EAASlD,eAC1BG,EAAgB+C,EAASE,eAE1BC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAiFZG,GAAa,SAAC3E,GAEhB+B,EADU,UAAR/B,EACWM,EACI,QAARN,EChLF,ggCCAO,icFqLhBiC,EAAYjC,IAGd,OACE,qCACE,qBAAIxB,UAAU,SAAd,UACE,oBAAIA,UAAS,UAAiB,UAAZwD,EAAqB,SAAU,IAAMlD,YAAa,WAAO6F,GAAW,UAAtF,mBACA,oBAAInG,UAAS,UAAiB,QAAZwD,EAAmB,SAAU,IAAMlD,YAAa,WAAO6F,GAAW,QAApF,iBACA,oBAAInG,UAAS,UAAiB,YAAZwD,EAAuB,SAAU,IAAMlD,YAAa,WAAO6F,GAAW,YAAxF,wBAGF,qBAAKnG,UAAU,eAAf,SACE,cAAC,EAAD,CAAUwB,IAAK8B,MAGjB,qBAAKtD,UAAU,QAAf,SACE,uBAAOA,UAAU,cAAjB,SACE,kCACE,6BACE,6BACE,wBAAQoG,IAAKhE,EAAW9B,YAtJjB,SAAC,GAAqB,IAAnB+F,EAAkB,EAAlBA,YACdC,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QAEjBlE,EAAWrB,QAAQwF,YACnBnE,EAAWrB,QAAQyF,OAAOH,EAASC,GACnChE,GAAa,GACb,IAAMmE,EAAI,2BACL1D,GADK,kBAEPE,EAAa,EAAI,KAEpBwD,EAAKxD,EAAa,GAAGyD,KAAK,CAACL,UAASC,YACpCtD,EAAWyD,GACXvD,EAAcD,EAAa,IA0IoC1C,UAAWqE,GAAa+B,YAxG5E,SAAC,GAAqB,IAAnBP,EAAkB,EAAlBA,YACNC,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QACjB,GAAKjE,EAAL,CAGAD,EAAWrB,QAAQ6F,OAAOP,EAASC,GACnClE,EAAWrB,QAAQ8F,SACnB,IAAMJ,EAAI,eACL1D,GAEL0D,EAAKxD,GAAYyD,KAAK,CAACL,UAASC,YAChCtD,EAAWyD,KA6F+FnG,aAAcsE,GAA5G,uCAGJ,6BACE,+BACA,wBAAQ7E,UAAS,UAAK0D,GAAc,UAAY,IAAMpD,YAzCvC,WACzBqD,IAAgB,IAwCiFoD,QA/F/E,WAClB,IAAMjD,EAAS1B,EAAUpB,QACzBqB,EAAWrB,QAAQgG,UAAU,EAAG,EAAGlD,EAAOO,MAAOP,EAAOrE,QACxDgD,EAAW,IACXQ,EAAW,IACXE,EAAc,GACdJ,GAAkB,GAClBJ,EAAiBV,GACjBY,EAAgB,KAuFuGrC,UAAW,WAAOmD,IAAgB,IAA/I,0BACA,wBAAQ3D,UAAS,UAAK4D,GAAa,UAAY,IAAMmD,QArF/C,WAChB,GAAIjE,EAAgB,CAClB,IAAMgB,EAAS1B,EAAUpB,QAGzB,IAAK,IAAIkB,KAFTG,EAAWrB,QAAQgG,UAAU,EAAG,EAAGlD,EAAOO,MAAOP,EAAOrE,QACxD4C,EAAWrB,QAAQ2D,YAAc,QACnB3B,EACZX,EAAWrB,QAAQyF,OAAOzD,EAAQd,GAAG,GAAGoE,QAAStD,EAAQd,GAAG,GAAGqE,SAC/DlE,EAAWrB,QAAQwF,YACnBxD,EAAQd,GAAG+E,SAAQ,SAACC,EAAMC,GACV,IAAVA,IACF9E,EAAWrB,QAAQ6F,OAAOK,EAAKZ,QAASY,EAAKX,SAC7ClE,EAAWrB,QAAQ8F,aAGvBzE,EAAWrB,QAAQ8D,YAErB/B,GAAkB,QAElBP,EAAQyE,SAAQ,SAACC,GACf7E,EAAWrB,QAAQ4D,UAAY,EAC3BsC,EAAKE,YAAc,IACrB/E,EAAWrB,QAAQ2D,YAAc,QACxBuC,EAAKE,YAAc,GAC5B/E,EAAWrB,QAAQ2D,YAAc,SAEjCtC,EAAWrB,QAAQ2D,YAAc,MAEnCtC,EAAWrB,QAAQyF,OAAOS,EAAKG,YAAYC,SAAS,GAAGC,EAAInE,EAAO8D,EAAKG,YAAYC,SAAS,GAAGE,EAAIpE,GACnGf,EAAWrB,QAAQwF,YACnBU,EAAKG,YAAYC,SAASL,SAAQ,SAACQ,GACjCpF,EAAWrB,QAAQ6F,OAAOY,EAAOF,EAAInE,EAAOqE,EAAOD,EAAGpE,GACtDf,EAAWrB,QAAQ8F,YAErBzE,EAAWrB,QAAQ8D,YACnBzC,EAAWrB,QAAQ8F,SACnBzE,EAAWrB,QAAQ2D,YAAc,QACjCtC,EAAWrB,QAAQ4D,UAAY,MAEjC7B,GAAkB,GAEpBc,IAAe,IA6CoEvD,YAtC3D,WACxBuD,IAAe,IAqCL,6CAOR,qBAAK7D,UAAU,UAAf,SACE,qBAAKA,UAAU,iBAAf,SACE,cAAC,EAAD,CAAgBY,SAAUA,GAAUQ,YAAasB,EAAezB,WAAY2B,QAIhF,sBAAK5C,UAAU,gBAAf,UACE,mBAAGA,UAAU,gBAAb,6CACA,wBAAOA,UAAU,WAAjB,UACE,gCACE,+BACE,2CACA,iDAGJ,gCACGwC,EAAQnB,KAAI,SAAC6F,EAAMC,GAAP,OACX,+BACE,6BACG,IAAMD,EAAKQ,OAAS,MAEvB,6BACGR,EAAKE,WAAWO,QAAQ,GAAGC,eALvBT,kBG3NRU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ad585101.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nfunction Bar(props) {\n    const [animate, setAnimate] = useState(true)\n    const [height, setHeight] = useState(0)\n    useEffect(() => {\n        setAnimate(false)\n        setTimeout(() => {\n            setAnimate(true)\n            setHeight(Math.round((props.val / 1.) * 60))\n        }, 0)\n    }, [props.val]);\n    return (\n        <div className={`Bar ${animate ? 'animate' : ''}`} style={{'--bar-height': `${height}px`}} ></div>\n    );\n}\n\nexport default Bar;","import { useState } from \"react\";\nimport Bar from './Bar';\n\nfunction BarElement(props) {\n  const [hovered, setHovered] = useState(false);\n  const handleEnter = () => {\n    setHovered(true)\n  }\n  const handleLeave = () => {\n    setHovered(false)\n  }\n  const handleDown = () => { //These functions are for mobile tapping\n    if (!hovered) {\n        setHovered(true)\n    }\n  }\n  const handleUp = () => {\n    if (!hovered) {\n        setHovered(false)\n    }\n  }\n  return (\n    <div className={`BarElement ${hovered ? 'interact' : ''}`} onMouseEnter={handleEnter} onMouseDown={handleDown} onMouseLeave={handleLeave} onMouseUp={handleUp}>\n        <span className={`tooltip ${hovered ? 'interact' : ''}`}>{props.val.toPrecision(4)}</span>\n        <Bar val={props.val} />\n        <div className=\"bar-bottom\"></div>\n        <span className=\"label\">{props.label}</span>\n    </div>\n  );\n}\n\nexport default BarElement;","import { useEffect, useRef, useState } from 'react';\nimport BarElement from './BarElement';\n\nfunction ConfidenceList(props) {\n  const [revealed, setRevealed] = useState(false);\n  const isFirstLoad = useRef(true)\n  useEffect(() => {\n    if (!isFirstLoad.current) {\n      setTimeout(() => {\n        setRevealed(true)\n      }, 0)\n    }\n    isFirstLoad.current = false\n  }, [props.revealed]);\n  return (\n    <>\n      <div className={`wall ${revealed? 'slide': ''}`}></div>\n      <div className=\"bar-container\">\n        <p>Tensorflow's prediction: {props.prediction}</p>\n        {Object.keys(props.confidences).map((key) => (\n            <BarElement key={key} label={key} val={props.confidences[key]}/>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default ConfidenceList;","import { useEffect, useRef, useState } from \"react\";\n\nfunction LeftCard(props) {\n    const [animate, setAnimate] = useState(true);\n    const [text, setText] = useState(props.tab);\n    const pageLoad = useRef(false);\n\n    useEffect(() => {\n        if (pageLoad.current) {\n            setAnimate(false)\n            setTimeout(() => {\n                setText(props.tab)\n                setAnimate(true)\n            }, 600)\n        }\n        pageLoad.current = true\n    }, [props.tab]);\n\n    return (\n        <div className={`LeftCard ${animate ? 'move' : ''}`} dangerouslySetInnerHTML={{__html: text}}></div>\n    );\n}\nexport default LeftCard;","const aboutText = \"<p>Welcome to my  Handwriting Recognizer!<br> <br> Just draw a letter in the box, and neural networks will attempt to read the letter as text. The result of Google's Cloud Vision Api will be on the right. 'Show Bounding Boxes' will reveal Google's outline of each letter.<br><br>Below is where the predictions of a Tensorflow model I trained will be displayed. <br> <br> Have fun! </p>\"\n\nexport default aboutText;","import React, {useEffect, useRef, useState} from \"react\";\nimport './App.css';\nimport ConfidenceList from './ConfidenceList';\nimport LeftCard from './LeftCard';\nimport aboutText from './textFiles/about.js';\nimport faqText from './textFiles/FAQ.js';\nimport contactText from './textFiles/contact';\n\nfunction App() {\n  const mapping = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabdefghnqrt';\n  const initialState = {}\n\n  for (let i = 0; i < mapping.length; i++) {\n    initialState[mapping[i]] = 0;\n  }\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [symbols, setSymbols] = useState([]);\n  const [tfconfidences, setTFConfidences] = useState(initialState);\n  const [tfprediction, setTFPrediction] = useState('');\n  const [isShowingBoxes, setIsShowingBoxes] = useState(false);\n  const [strokes, setStrokes] = useState({});\n  const [numStrokes, setNumStrokes] = useState(0);\n  const [scale, setScale] = useState(0);\n  const [cardState, setCardState] = useState(aboutText);\n  const [tabState, setTabState] = useState('about');\n  const [clearClicked, setClearClicked] = useState(false);\n  const [showClicked, setShowClicked] = useState(false);\n  const [revealed, setRevealed] = useState(false);\n  \n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const size = Math.min(window.innerHeight, window.innerWidth)\n    const csize = 250;\n    canvas.width = size;\n    canvas.height = size;\n    canvas.style.width = `${csize}px`;\n    canvas.style.height = `${csize}px`;\n    canvas.style.border = `1px solid black`;\n\n    const context = canvas.getContext(\"2d\");\n    context.scale(size/csize, size/csize);\n    setScale(size/csize);\n    context.lineCap = \"round\";\n    context.lineJoin = 'round';\n    context.strokeStyle = \"black\";\n    context.lineWidth = 20;\n    contextRef.current = context;\n  }, []);\n\n  const startDrawing = ({ nativeEvent }) => {\n    const { offsetX, offsetY } = nativeEvent;\n\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n    const temp = {\n      ...strokes,\n      [numStrokes + 1]: []\n    };\n    temp[numStrokes + 1].push({offsetX, offsetY});\n    setStrokes(temp);\n    setNumStrokes(numStrokes + 1);\n  };\n\n  const stopDrawing = () => {\n    if (isDrawing) {\n      contextRef.current.closePath();\n      setIsDrawing(false);\n      setRevealed(true);\n      const dataURL = canvasRef.current.toDataURL();\n\n      let header = new Headers();\n      header.append(\"Content-Type\", \"application/json\");\n\n      let formdata = new FormData();\n      formdata.append(\"base64image\", dataURL);\n      let requestOptions = {\n        method: 'POST',\n        headers: header,\n        body: formdata,\n        redirect: 'follow'\n      };\n      fetch(\"https://ul2efbv4q2.execute-api.us-west-1.amazonaws.com\", requestOptions)\n      .then(response => response.json())\n      .then(response => {\n        setSymbols(response.symbols || []);\n        setTFConfidences(response.tfconfidences);\n        setTFPrediction(response.tfresponse);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    }\n  };\n\n  const draw = ({ nativeEvent }) => {\n    const { offsetX, offsetY } = nativeEvent;\n    if (!isDrawing) {\n      return;\n    }\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n    const temp = {\n      ...strokes\n    };\n    temp[numStrokes].push({offsetX, offsetY});\n    setStrokes(temp);\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    contextRef.current.clearRect(0, 0, canvas.width, canvas.height);\n    setSymbols([]);\n    setStrokes({});\n    setNumStrokes(0);\n    setIsShowingBoxes(false);\n    setTFConfidences(initialState);\n    setTFPrediction('');\n  }\n\n  const toggleBox = () => {\n    if (isShowingBoxes) {\n      const canvas = canvasRef.current;\n      contextRef.current.clearRect(0, 0, canvas.width, canvas.height);\n      contextRef.current.strokeStyle = 'black';\n      for (let i in strokes) {\n        contextRef.current.moveTo(strokes[i][0].offsetX, strokes[i][0].offsetY);\n        contextRef.current.beginPath();\n        strokes[i].forEach((item, index) => {\n          if (index !== 0) {\n            contextRef.current.lineTo(item.offsetX, item.offsetY);\n            contextRef.current.stroke();\n          }\n        });\n        contextRef.current.closePath();\n      }\n      setIsShowingBoxes(false);\n    } else {\n      symbols.forEach((item) =>{\n        contextRef.current.lineWidth = 4;\n        if (item.confidence >= 0.85) {\n          contextRef.current.strokeStyle = 'green';\n        } else if (item.confidence >= 0.5) {\n          contextRef.current.strokeStyle = 'orange';\n        } else {\n          contextRef.current.strokeStyle = 'red';\n        }\n        contextRef.current.moveTo(item.boundingBox.vertices[0].x / scale, item.boundingBox.vertices[0].y / scale);\n        contextRef.current.beginPath();\n        item.boundingBox.vertices.forEach((vertex) => {\n          contextRef.current.lineTo(vertex.x / scale, vertex.y/ scale);\n          contextRef.current.stroke();\n        });\n        contextRef.current.closePath();\n        contextRef.current.stroke();\n        contextRef.current.strokeStyle = 'black';\n        contextRef.current.lineWidth = 20;\n      });\n      setIsShowingBoxes(true);\n    }\n    setShowClicked(false)\n  }\n\n  const handleClearClicked = () => {\n    setClearClicked(true)\n  }\n\n  const handleShowClicked = () => {\n    setShowClicked(true)\n  }\n\n  const tabClicked = (tab) => {\n    if (tab === 'about') {\n      setCardState(aboutText)\n    } else if (tab === 'faq') {\n      setCardState(faqText)\n    } else {\n      setCardState(contactText)\n    }\n    setTabState(tab)\n  }\n\n  return (\n    <>\n      <ul className=\"navbar\">\n        <li className={`${tabState ==='about'? 'active': ''}`} onMouseDown={() => {tabClicked('about')}}>About</li>\n        <li className={`${tabState ==='faq'? 'active': ''}`} onMouseDown={() => {tabClicked('faq')}}>FAQ</li>\n        <li className={`${tabState ==='contact'? 'active': ''}`} onMouseDown={() => {tabClicked('contact')}}>Contact</li>\n      </ul>\n\n      <div className=\"left-sidebar\">\n        <LeftCard tab={cardState} />\n      </div>\n\n      <div className=\"main1\">\n        <table className=\"mainContent\">\n          <tbody>\n            <tr>\n              <td>\n                <canvas ref={canvasRef} onMouseDown={startDrawing} onMouseUp={stopDrawing} onMouseMove={draw} onMouseLeave={stopDrawing}>Something went wrong.</canvas>\n              </td>\n            </tr>\n            <tr>\n              <td>\n              <button className={`${clearClicked? 'clicked' : ''}`} onMouseDown={handleClearClicked} onClick={clearCanvas} onMouseUp={() => {setClearClicked(false)}}>Clear canvas</button>\n              <button className={`${showClicked? 'clicked' : ''}`} onClick={toggleBox} onMouseDown={handleShowClicked}>Show bounding boxes</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"wrapper\">\n        <div className=\"ConfidenceList\">\n          <ConfidenceList revealed={revealed} confidences={tfconfidences} prediction={tfprediction} />\n        </div>\n      </div>\n\n      <div className=\"right-sidebar\">\n        <p className=\"section-title\">Google's Cloud Vision response:</p>\n        <table className=\"response\">\n          <thead>\n            <tr>\n              <th>Character</th>\n              <th>Confidence</th>\n            </tr>\n          </thead>\n          <tbody>\n            {symbols.map((item, index) =>(\n              <tr key={index}>\n                <td>\n                  {'\"' + item.symbol + '\"'}\n                </td>\n                <td>\n                  {item.confidence.toFixed(2).toString()}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const faqText = `<p><strong>Q:</strong> Why are some of the lowercase letters missing?<br>\n<strong>A:</strong> The letters that look the same in lowercase and uppercase are merged into a single result, since it would be impossible to decide otherwise. \nIt just gives the neural nets an easier job :) <br><br><strong>Q:</strong> How come I drew something and Google's response didn't change?\n<br><strong>A:</strong> No response from Google means it didn't recognize anything in the image :(. The TensorFlow model will always respond, though, even if you scribble. \n<br><br><strong>Q:</strong> Why is Google's accuracy/confidence lower?<br><strong>A:</strong> Google's Cloud Vision is trained to recognize not just a single letter, but many at a time (if you can fit them), and even punctuation. \nNot only that, it works on other languages, too. Give it a shot with the Cyrillic И or the Chinese 子! So its accuracy can't really be compared to the Tensorflow model, which only recognizes square, grayscale, single letters.</p>`;\n\nexport default faqText;","const contactText = '<p>Hello!</p><p>This website was created by Andrew Zhang, a rising junior at UC Berkeley studying Electrical Engineering and Computer Science. For more info about me or contact information, here is my email, Github, and LinkedIn:</p><p>Email: aezhang1@gmail.com</p><p>Github: <a href=\"https://github.com/aezhang\">https://github.com/aezhang</a></p><p>LinkedIn: <a href=\"https://www.linkedin.com/in/aezhang\">https://www.linkedin.com/in/aezhang</p>';\n\nexport default contactText;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}